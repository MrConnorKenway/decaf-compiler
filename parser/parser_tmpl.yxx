%code requires {
#include "build/include/ast.h"
}

%{
#include <iostream>
#include <cassert>
#include "build/include/ast.h"

#define YYERROR_VERBOSE

int yylex();
string get_yytext();
void yyerror(const char *s);

ast_node_ptr_t root;
extern string src_file_name;
%}

%define parse.error verbose
%locations

%union {
$union_section
	ast_node_ptr_t base_node_ptr_t;
	Ident_node* Ident_node_ptr_t;
	User_defined_type_node* User_defined_type_node_ptr_t;
	Int_const_node* Int_const_node_ptr_t;
	Double_const_node* Double_const_node_ptr_t;
	Str_const_node* Str_const_node_ptr_t;
	int int_val;
}

$decl_section

%token <Int_const_node_ptr_t> c_int
%token <Double_const_node_ptr_t> c_double
%token <Str_const_node_ptr_t> c_string

%type <base_node_ptr_t> Program
%type <base_node_ptr_t> Decl
%type <base_node_ptr_t> VariableDecl
%type <base_node_ptr_t> Formals
%type <base_node_ptr_t> Field
%type <base_node_ptr_t> Actuals
%type <base_node_ptr_t> Stmt
%type <base_node_ptr_t> ElseStmt
%type <base_node_ptr_t> Expr
%type <base_node_ptr_t> LValue
%type <base_node_ptr_t> Constant
%type <base_node_ptr_t> Type
%type <base_node_ptr_t> Extender

%right THEN t_else
%token ';'
%left  ','
%right '='
%left t_or
%left t_and 
%left '<' t_less_eq '>' t_greater_eq t_eq t_not_eq
%left '+' '-'
%left '*' '/' '%'
%left '.' 
%precedence NEG
%right '!' 
%left '[' ']' 
%token '(' ')' '{' '}'

%%

$rule_section

%%

void yyerror(const char *s) {
  fprintf(stderr, "line:%d Col:%d %s\n", yylloc.first_line, yylloc.first_column, s);
}