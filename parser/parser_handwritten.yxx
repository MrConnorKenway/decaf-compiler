%code requires {
#include "build/include/ast.h"
}

%{
#include <iostream>
#include <cassert>
#include "build/include/ast.h"

#define YYERROR_VERBOSE

int yylex();
string get_yytext();
void yyerror(const char *s);

ast_node_ptr_t root;
extern string src_file_name;
%}

%define parse.error verbose
%locations

%union {
	ReturnStmt_node* ReturnStmt_node_ptr_t;
	WhileStmt_node* WhileStmt_node_ptr_t;
	BreakStmt_node* BreakStmt_node_ptr_t;
	InterfaceDecl_node* InterfaceDecl_node_ptr_t;
	IfStmt_node* IfStmt_node_ptr_t;
	ContinueStmt_node* ContinueStmt_node_ptr_t;
	StmtBlock_node* StmtBlock_node_ptr_t;
	Call_node* Call_node_ptr_t;
	ClassDecl_node* ClassDecl_node_ptr_t;
	ForStmt_node* ForStmt_node_ptr_t;
	Variable_node* Variable_node_ptr_t;
	List_node *List_node_ptr_t;
	Prototype_node* Prototype_node_ptr_t;
	FunctionDecl_node* FunctionDecl_node_ptr_t;
	PrintStmt_node* PrintStmt_node_ptr_t;

	ast_node_ptr_t base_node_ptr_t;
	Ident_node* Ident_node_ptr_t;
	User_defined_type_node* User_defined_type_node_ptr_t;
	Int_const_node* Int_const_node_ptr_t;
	Double_const_node* Double_const_node_ptr_t;
	Str_const_node* Str_const_node_ptr_t;
	int int_val;
}

%token <base_node_ptr_t> t_implements
%token <base_node_ptr_t> t_this
%token <base_node_ptr_t> t_return
%token <base_node_ptr_t> t_eq
%token <base_node_ptr_t> t_bool
%token <base_node_ptr_t> t_double
%token <base_node_ptr_t> t_false
%token <base_node_ptr_t> t_null
%token <base_node_ptr_t> t_greater_eq
%token <base_node_ptr_t> t_int
%token <base_node_ptr_t> t_else
%token <base_node_ptr_t> t_while
%token <base_node_ptr_t> t_for
%token <base_node_ptr_t> t_class
%token <base_node_ptr_t> t_string
%token <base_node_ptr_t> t_extends
%token <User_defined_type_node_ptr_t> t_type_ident
%token <base_node_ptr_t> t_void
%token <base_node_ptr_t> t_not_eq
%token <base_node_ptr_t> t_or
%token <base_node_ptr_t> t_NewArray
%token <base_node_ptr_t> t_if
%token <base_node_ptr_t> t_and
%token <base_node_ptr_t> t_break
%token <base_node_ptr_t> t_New
%token <base_node_ptr_t> t_Print
%token <base_node_ptr_t> t_ReadInteger
%token <base_node_ptr_t> t_continue;
%token <Ident_node_ptr_t> t_ident
%token <base_node_ptr_t> t_less_eq
%token <base_node_ptr_t> t_true
%token <base_node_ptr_t> t_interface
%token <base_node_ptr_t> t_ReadLine

%type <Prototype_node_ptr_t> Prototype
%type <List_node_ptr_t> Implementer
%type <List_node_ptr_t> FieldList
%type <FunctionDecl_node_ptr_t> FunctionDecl
%type <List_node_ptr_t> StmtList
%type <Call_node_ptr_t> Call
%type <IfStmt_node_ptr_t> IfStmt
%type <base_node_ptr_t> ExtenderOptional
%type <List_node_ptr_t> t_type_identCommaList
%type <WhileStmt_node_ptr_t> WhileStmt
%type <ClassDecl_node_ptr_t> ClassDecl
%type <List_node_ptr_t> VariableCommaListOptional
%type <List_node_ptr_t> PrototypeList
%type <ContinueStmt_node_ptr_t> ContinueStmt
%type <List_node_ptr_t> DeclList
%type <InterfaceDecl_node_ptr_t> InterfaceDecl
%type <List_node_ptr_t> FieldListOptional
%type <List_node_ptr_t> ExprCommaList
%type <List_node_ptr_t> ExprCommaListOptional
%type <ForStmt_node_ptr_t> ForStmt
%type <base_node_ptr_t> ExprOptional
%type <Variable_node_ptr_t> Variable
%type <StmtBlock_node_ptr_t> StmtBlock
%type <BreakStmt_node_ptr_t> BreakStmt
%type <List_node_ptr_t> StmtListOptional
%type <List_node_ptr_t> VariableCommaList
%type <List_node_ptr_t> ImplementerOptional
%type <PrintStmt_node_ptr_t> PrintStmt
%type <ReturnStmt_node_ptr_t> ReturnStmt
%type <List_node_ptr_t> PrototypeListOptional


%token <Int_const_node_ptr_t> c_int
%token <Double_const_node_ptr_t> c_double
%token <Str_const_node_ptr_t> c_string

%type <base_node_ptr_t> Program
%type <base_node_ptr_t> Decl
%type <base_node_ptr_t> VariableDecl
%type <base_node_ptr_t> Formals
%type <base_node_ptr_t> Field
%type <base_node_ptr_t> Actuals
%type <base_node_ptr_t> Stmt
%type <base_node_ptr_t> ElseStmt
%type <base_node_ptr_t> Expr
%type <base_node_ptr_t> LValue
%type <base_node_ptr_t> Constant
%type <base_node_ptr_t> Type
%type <base_node_ptr_t> Extender

%right THEN t_else
%token ';'
%left  ','
%right '='
%left t_or
%left t_and 
%left '<' t_less_eq '>' t_greater_eq t_eq t_not_eq
%left '+' '-'
%left '*' '/' '%'
%left '.' 
%precedence NEG
%right '!' 
%left '[' ']' 
%token '(' ')' '{' '}'

%%

Program: 
    DeclList { $$ = $1; root = $$; }
;

Decl: 
    ClassDecl 
  | InterfaceDecl 
;

VariableDecl: 
    Variable ';' 
;

Variable: 
    Type t_ident { $$ = new Variable_node($1, $2); $$->yylloc_ptr = $1->yylloc_ptr; }
;

Type: 
    t_int { $$ = new Base_type_node(t_int); $$->yylloc_ptr = $1->yylloc_ptr; }
  | t_double { $$ = new Base_type_node(t_double); $$->yylloc_ptr = $1->yylloc_ptr; }
  | t_bool { $$ = new Base_type_node(t_bool); $$->yylloc_ptr = $1->yylloc_ptr; }
  | t_string { $$ = new Base_type_node(t_string); $$->yylloc_ptr = $1->yylloc_ptr; }
  | t_type_ident 
  | Type '[' ']' { $$ = new Array_type_node($1); $$->yylloc_ptr = $1->yylloc_ptr; }
;

FunctionDecl: 
    Type t_ident '(' Formals ')' StmtBlock { $$ = new FunctionDecl_node($1, $2, $4, $6); $$->yylloc_ptr = $2->yylloc_ptr; }
  | t_void t_ident '(' Formals ')' StmtBlock { $$ = new FunctionDecl_node(new Base_type_node(t_void), $2, $4, $6); $$->yylloc_ptr = $2->yylloc_ptr; }
;

Formals: 
    VariableCommaListOptional 
;

ClassDecl: 
    t_class t_type_ident ExtenderOptional ImplementerOptional '{' FieldListOptional '}' { 
      $$ = new ClassDecl_node($2, $3, $4, $6); 
      $$->yylloc_ptr = $2->yylloc_ptr;
    }
;

Extender: 
    t_extends t_type_ident { $$ = $2; }
;

Implementer: 
    t_implements t_type_identCommaList { $$ = $2; }
;

Field: 
    VariableDecl 
  | FunctionDecl 
;

InterfaceDecl: 
    t_interface t_type_ident '{' PrototypeListOptional '}' { $$ = new InterfaceDecl_node($2, $4); $$->yylloc_ptr = $2->yylloc_ptr; }
;

Prototype: 
    Type t_ident '(' Formals ')' ';' { $$ = new Prototype_node($1, $2, $4); $$->yylloc_ptr = $2->yylloc_ptr; }
  | t_void t_ident '(' Formals ')' ';' { $$ = new Prototype_node(new Base_type_node(t_void), $2, $4); $$->yylloc_ptr = $2->yylloc_ptr; }
;

StmtBlock: 
    '{' StmtListOptional '}' { $$ = new StmtBlock_node($2); }
;

Stmt: 
    ExprOptional ';' 
  | IfStmt 
  | WhileStmt 
  | ForStmt 
  | BreakStmt 
  | ContinueStmt
  | ReturnStmt 
  | PrintStmt 
  | StmtBlock 
  | VariableDecl 
;

IfStmt: 
    t_if '(' Expr ')' Stmt ElseStmt { $$ = new IfStmt_node($3, $5, $6); $$->yylloc_ptr = $1->yylloc_ptr; }
  | t_if '(' Expr ')' Stmt %prec THEN { $$ = new IfStmt_node($3, $5, new Empty_node()); $$->yylloc_ptr = $1->yylloc_ptr; }
;

ElseStmt: 
    t_else Stmt { $$ = $2; $$->yylloc_ptr = $1->yylloc_ptr; }
;

WhileStmt: 
    t_while '(' Expr ')' Stmt { $$ = new WhileStmt_node($3, $5); $$->yylloc_ptr = $1->yylloc_ptr; }
;

ForStmt: 
    t_for '(' ExprOptional ';' Expr ';' ExprOptional ')' Stmt { $$ = new ForStmt_node($3, $5, $7, $9); }
;

ReturnStmt: 
    t_return ExprOptional ';' { $$ = new ReturnStmt_node($2); $$->yylloc_ptr = $1->yylloc_ptr; }
;

BreakStmt: 
    t_break ';' { $$ = new BreakStmt_node(nullptr); }
;

ContinueStmt:
    t_continue ';' { $$ = new ContinueStmt_node(nullptr); }
;

PrintStmt: 
    t_Print '(' ExprCommaList ')' ';' { $$ = new PrintStmt_node($3); }
;

Expr: 
    LValue '=' Expr { $$ = new Assignment_node($1, $3); $$->yylloc_ptr = $1->yylloc_ptr; }
  | Constant 
  | LValue 
  | t_this { $$ = new This_node(); $$->yylloc_ptr = $1->yylloc_ptr; }
  | Call 
  | '(' Expr ')' { $$ = $2; $$->yylloc_ptr = $2->yylloc_ptr; }
  | Expr '+' Expr { $$ = new Binary_expr_node($1, '+', $3); $$->yylloc_ptr = $1->yylloc_ptr; }
  | Expr '-' Expr { $$ = new Binary_expr_node($1, '-', $3); $$->yylloc_ptr = $1->yylloc_ptr; }
  | Expr '*' Expr { $$ = new Binary_expr_node($1, '*', $3); $$->yylloc_ptr = $1->yylloc_ptr; }
  | Expr '/' Expr { $$ = new Binary_expr_node($1, '/', $3); $$->yylloc_ptr = $1->yylloc_ptr; }
  | Expr '%' Expr { $$ = new Binary_expr_node($1, '%', $3); $$->yylloc_ptr = $1->yylloc_ptr; }
  | '-' Expr %prec NEG {$$ = new Unary_expr_node('-', $2); $$->yylloc_ptr = $2->yylloc_ptr; }
  | Expr '<' Expr { $$ = new Binary_expr_node($1, '<', $3); $$->yylloc_ptr = $1->yylloc_ptr; }
  | Expr t_less_eq Expr { $$ = new Binary_expr_node($1, t_less_eq, $3); $$->yylloc_ptr = $1->yylloc_ptr; }
  | Expr '>' Expr { $$ = new Binary_expr_node($1, '>', $3); $$->yylloc_ptr = $1->yylloc_ptr; }
  | Expr t_greater_eq Expr { $$ = new Binary_expr_node($1, t_greater_eq, $3); $$->yylloc_ptr = $1->yylloc_ptr; }
  | Expr t_eq Expr { $$ = new Binary_expr_node($1, t_eq, $3); $$->yylloc_ptr = $1->yylloc_ptr; }
  | Expr t_not_eq Expr { $$ = new Binary_expr_node($1, t_not_eq, $3); $$->yylloc_ptr = $1->yylloc_ptr; }
  | Expr t_and Expr { $$ = new Binary_expr_node($1, t_and, $3); $$->yylloc_ptr = $1->yylloc_ptr; }
  | Expr t_or Expr { $$ = new Binary_expr_node($1, t_or, $3); $$->yylloc_ptr = $1->yylloc_ptr; }
  | '!' Expr {$$ = new Unary_expr_node('!', $2); $$->yylloc_ptr = $2->yylloc_ptr; }
  | t_ReadInteger '(' ')' { $$ = new Read_op_node(t_ReadInteger); $$->yylloc_ptr = $1->yylloc_ptr; }
  | t_ReadLine '(' ')' { $$ = new Read_op_node(t_ReadLine); $$->yylloc_ptr = $1->yylloc_ptr; }
  | t_New '(' t_type_ident ')' { $$ = new New_op_node($3); $$->yylloc_ptr = $1->yylloc_ptr; }
  | t_NewArray '(' Expr ',' Type ')' { $$ = new New_array_op_node($5, $3); $$->yylloc_ptr = $1->yylloc_ptr; }
;

LValue: 
    t_ident 
  | Expr '.' t_ident { $$ = new Dot_op_node($1, $3); $$->yylloc_ptr = $1->yylloc_ptr; }
  | Expr '[' Expr ']' { $$ = new Index_op_node($1, $3); $$->yylloc_ptr = $1->yylloc_ptr; }
;

Call: 
    t_ident '(' Actuals ')' { $$ = new Call_node($3, $1, new Empty_node()); $$->yylloc_ptr = $1->yylloc_ptr; }
  | Expr '.' t_ident '(' Actuals ')' { $$ = new Call_node($5, $3, $1); $$->yylloc_ptr = $3->yylloc_ptr; }
;

Actuals: 
    ExprCommaListOptional 
;

Constant: 
    c_int 
  | c_double 
  | t_true { $$ = new Bool_const_node(t_true); $$->yylloc_ptr = $1->yylloc_ptr; }
  | t_false { $$ = new Bool_const_node(t_false); $$->yylloc_ptr = $1->yylloc_ptr; }
  | c_string 
  | t_null { $$ = new Null_const_node(); $$->yylloc_ptr = $1->yylloc_ptr; }
;

ExtenderOptional: 
    %empty { $$ = new Empty_node(); }
  | Extender 
;

t_type_identCommaList: 
    t_type_ident { $$ = new List_node(); $$->list.push_back($1); }
  | t_type_identCommaList ',' t_type_ident { $$ = $1; $$->list.push_back($3); }
;

ExprCommaList: 
    Expr { $$ = new List_node(); $$->list.push_back($1); }
  | ExprCommaList ',' Expr { $$ = $1; $$->list.push_back($3); }
;

VariableCommaListOptional: 
    %empty { $$ = new List_node(); }
  | VariableCommaList
;

DeclList: 
    Decl { $$ = new List_node(); $$->list.push_back($1); $$->node_type = "DeclList_node"; }
  | DeclList Decl { $$ = $1; $$->list.push_back($2); }
;

ImplementerOptional: 
    %empty { $$ = new List_node(); }
  | Implementer
;

ExprOptional: 
    %empty { $$ = new Empty_node(); }
  | Expr
;

FieldList:
    Field { $$ = new List_node(); $$->list.push_back($1); }
  | FieldList Field { $$ = $1; $$->list.push_back($2); }

FieldListOptional: 
    %empty { $$ = new List_node(); }
  | FieldList
;

VariableCommaList: 
    Variable { $$ = new List_node(); $$->list.push_back($1); }
  | VariableCommaList ',' Variable { $$ = $1; $$->list.push_back($3); }
;

ExprCommaListOptional: 
    %empty { $$ = new List_node(); }
  | ExprCommaList
;

StmtList: 
    Stmt { $$ = new List_node(); $$->list.push_back($1); }
 | StmtList Stmt { $$ = $1; $$->list.push_back($2); }
;

StmtListOptional: 
    %empty { $$ = new List_node(); }
  | StmtList
;

PrototypeList: 
    Prototype { $$ = new List_node(); $$->list.push_back($1); }
 | PrototypeList Prototype { $$ = $1; $$->list.push_back($2); }
;

PrototypeListOptional: 
    %empty { $$ = new List_node(); }
  | PrototypeList
;



%%

void yyerror(const char *s) {
  fprintf(stderr, "%s:%d:%d %s\n", src_file_name.c_str(), yylloc.first_line, yylloc.first_column, s);
  std::cerr << "yytext: " << get_yytext() << endl;
  exit(-1);
}
